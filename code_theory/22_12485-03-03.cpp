// プログラミング言語:C++
// コンパイル方法:g++ -std=c++17 22_12485-03-03.cpp
// 実行方法:コンパイルで生成したa.outというファイルを実行
// (Ubuntu 20.04.06 LTSで"./a.out"で実行できることを確認した)

/*
03-03 (b)
hat_c
i_MD=56
*/

#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <iomanip>
#include <map>
#include <queue>
#include <bitset>
#include <algorithm>
using namespace std;

int main(void){
    int n = 0; // 符号長
    int m = 0; // 符号の要素数
    int d = 0; // 最小距離
    int i_MD = 0; // 出力する添え字
    int cnt = 0; // ハミング距離を調べるカウンタ変数
    string r = ""; // 受信語 
    string c_hat = ""; // 推定符号語

    /*符号長、要素数の受け取り*/
    cout << "n=";
    cin >> n;
    cout << "M=";
    cin >> m;

    d = n; // 最小距離はより小さいものがあるたびに更新していくので初期値は最大値であるnにしておく

    vector<string> c(m); // 符号を保持する配列

    /*符号の入力*/
    cout << "C=" << endl;
    for(int i=0;i<m;i++){
        cin >> c.at(i);
    }

    /*受信語の入力*/
    cout << "r=" << endl;
    cin >> r;

    /*
    受信語と各符号のハミング距離を調査
    これまでの最小のハミング距離よりも小さいハミング距離が現れたらその符号を仮の複号語とする
    同時に添え字とそのときのハミング距離も保存
    これを全て調べつくすまで繰り返す、最終的に保存されているものが複合結果
    */
    for(int i=0;i<m;i++){
        cnt = 0;
        for(int j=0;j<n;j++){
            if(c.at(i).at(j) != r.at(j)) cnt++;
        }
        if(d>cnt){
            d = cnt;
            i_MD = i;
            c_hat = c.at(i);
        }
    }

    /*結果の出力*/
    cout << endl;
    cout << "OUTPUT:" << endl;
    cout << "hat_c=" << c_hat << endl;
    cout << "i_MD=" << i_MD << endl;

    return 0;
}